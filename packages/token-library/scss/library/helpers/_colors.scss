@use 'sass:string';
@use 'sass:map';

//-------------------------------------------------------------------
// Color Helper Functions
//-------------------------------------------------------------------

@function returnColorValue($colorValue, $alpha: 1) {
  @if contains($colorValue, 'lch') {
    @if $alpha < 1 {
      $colorValue: string.insert($colorValue, ' / #{$alpha}', -2);
    }
    @return string.unquote($colorValue);
  } @else {
    @return rgba($colorValue, $alpha);
  }
}

@function color($color, $alpha: 1) {
  $colorList: $colors;
  $colorName: $color;

  @if contains($color, '-') {
    $colorName: string.slice($color, 1, string.index($color, '-') - 1);
    $shade: string.slice($color, string.index($color, '-') + 1);

    @if contains($shade, '-') {
      $shade: string.slice($shade, string.index($shade, '-') + 1);
      $shadeLength: string.length($shade);
      $colorlength: string.length($color);
      $colorNameLength: $colorlength - $shadeLength - 1;
      $colorName: string.slice($color, 1, $colorNameLength);
    }

    @if map-has-key($colors, $colorName) {
      $colorList: map.get($colors, $colorName);
      $colorValue: map.get($colorList, $shade);
      @return returnColorValue($colorValue, $alpha);
    }
  }

  @if map-has-key($colors, $colorName) {
    $colorValue: map-get($colors, $colorName);
    @return returnColorValue($colorValue, $alpha);
  }

  @warn errorMessage($color, $colors, 'tokens/_colors.scss');
  @return 'WARN: Invalid Color';
  @return null;
}
