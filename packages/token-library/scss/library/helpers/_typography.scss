@use 'sass:string';
@use 'sass:map';
@use 'sass:list';
@import '../tokens/_typography.scss';

//-------------------------------------------------------------------
// Typography Helper Functions
//-------------------------------------------------------------------
$font-families: map-get($typography, 'families');
$font-sizes: map-get($typography, 'sizes');
$font-weights: map-get($typography, 'weights');
$line-heights: map-get($typography, 'line-heights');
$letter-spacing: map-get($typography, 'letter-spacing');

@function font-family($family) {
  @if map-has-key($font-families, $family) {
    $family: map-get($font-families, $family);
    @return string.unquote($family);
  } @else {
    @warn errorMessage($family, $font-families, 'tokens/_typography.scss');
    @return 'WARNING: Invalid Font Family';
  }
}

@function font-size($size) {
  $size: '#{$size}';

  @if map-has-key($font-sizes, $size) {
    $size: map-get($font-sizes, $size);
    @return $size;
  } @else {
    @warn errorMessage($size, $font-sizes, 'tokens/_typography.scss');
    @return 'WARNING: Invalid Font Size';
  }
}

@function font-weight($weight: regular) {
  @if map-has-key($font-weights, $weight) {
    $font-weight: map-get($font-weights, $weight);
    @if type-of($font-weight) == 'string' {
      @return string.unquote($font-weight);
    } @else {
      @return $font-weight;
    }
  } @else {
    @warn errorMessage($weight, $font-weights, 'tokens/_typography.scss');
    @return 'WARNING: Invalid Font Weight';
  }
}

@function line-height($height: 'normal') {
  @if map-has-key($line-heights, $height) {
    $height: map-get($line-heights, $height);
    @if type-of($height) == 'string' {
      @return string.unquote($height);
    } @else {
      @return $height;
    }
  } @else {
    @warn errorMessage($height, $line-heights, 'tokens/_typography.scss');
    @return 'WARNING: Invalid Line Height';
  }
}

@function letter-spacing($spacing: 'normal') {
  @if map-has-key($letter-spacing, $spacing) {
    $spacing: map-get($letter-spacing, $spacing);
    @return string.unquote($spacing);
  } @else {
    @warn errorMessage($spacing, $letter-spacing, 'tokens/_typography.scss');
    @return 'WARNING: Invalid Letter Spacing';
  }
}

@mixin font($size, $weight: null, $family: list.nth(map-keys($font-families), 1), $line-height: null, $letter-spacing: null, $properties...) {
  @if ($family) {
    font-family: font-family($family);
  } @else {
    font-family: var(--font-family-primary);
  }
  @if ($size) {
    font-size: font-size($size);
  }
  @if ($weight) {
    font-weight: font-weight($weight);
  }
  @if ($line-height) {
    line-height: line-height($line-height);
  }
  @if ($letter-spacing) {
    letter-spacing: letter-spacing($letter-spacing);
  }
  @each $property in $properties {
    @if $property == 'capitalize' {
      text-transform: capitalize;
    }
    @if $property == 'uppercase' {
      text-transform: uppercase;
    }
    @if $property == 'lowercase' {
      text-transform: lowercase;
    }
  }
}
