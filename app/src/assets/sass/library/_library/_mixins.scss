// Layout
// -----------------------------------------------------------------------------

// Maintain a porportionate width/height ratio
@mixin ratio($width, $height) {
    position: relative;

    &::before {
        content: '';
        display: block;
        padding-top: #{($height / $width) * 100%};
        @content;
    }
}

// Share padding and margin values
@mixin padding-x($value) {
    padding-left: $value;
    padding-right: $value;
}

@mixin padding-y($value) {
    padding-top: $value;
    padding-bottom: $value;
}

@mixin margin-x($value) {
    margin-left: $value;
    margin-right: $value;
}

@mixin margin-y($value) {
    margin-top: $value;
    margin-bottom: $value;
}

@mixin iphone-x-safe-area($edges...) {
    @if length($edges) > 0 {
        @each $edge in $edges {
            padding-#{$edge}: env(safe-area-inset-#{$edge});
        }
    } @else {
        padding: env(safe-area-inset-top)
        env(safe-area-inset-right)
        env(safe-area-inset-bottom)
        env(safe-area-inset-left);
    }
}

// If only one value is passed, the height will equal the width
@mixin size($height, $width: $height) {
    height: $height;
    width: $width;
}

// Circle
// Create a square with a full border radius
@mixin circle($size) {
    @include size($size);
    border-radius: $size;
}

// Quick Absolute Positioning
@mixin absolute {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
}

// Clear Fix
@mixin clearfix {
    &::after {
        clear: both;
        content: '';
        display: table;
    }
}

// Hide visually, still be present for screen readers
@mixin visually-hidden {
    position: absolute;
    left: -10000px;
    top: auto;
    width: 1px;
    height: 1px;
    overflow: hidden;
}

// Media Queries
// -----------------------------------------------------------------------------

@mixin mq($size, $limiter: 'min-width', $max-size: '') {
    @if ($limiter == 'between') {
        @media only screen and (min-width: $size) and (max-width: $max-size) {
            @content;
        }
    } @else {
        @media only screen and ($limiter: $size) {
            @content;
        }
    }
}

// Presentation Styles
// -----------------------------------------------------------------------------

// Displaying and Hiding Content
@mixin show($state) {
    @if $state == on {
        pointer-events: auto;
        visibility: visible;
        will-change: auto;
        opacity: 1;
    }

    @if $state == off {
        pointer-events: none;
        visibility: hidden;
        will-change: auto;
        opacity: 0;
    }
}

@mixin truncate() {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

// Strip Units
// -----------------------------------------------------------------------------
// Strips the unit from a number.
//    https://github.com/thoughtbot/bourbon/blob/v4-stable/app/assets/stylesheets/functions/_strip-units.scss
//    https://css-tricks.com/snippets/sass/strip-unit-function/

@function strip-units($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;
}

// Convert Pixels to EMs
// -----------------------------------------------------------------------------
// eg. for a relational value of 12px write em(12) when the parent is 16px
// if the parent is another value say 24px write em(12, 24)
//    https://github.com/thoughtbot/bourbon/blob/v4-stable/app/assets/stylesheets/functions/_px-to-em.scss

@function em($pxval, $base: 16) {
    $pxval: strip-units($pxval);

    @return ($pxval / $base) + em;
}

// @mixin em($pxval, $base: $em-base) {
//     em($pxval);
// }

@function rem($pxval, $base: 16) {
    $pxval: strip-units($pxval);

    @return ($pxval / $base) + rem;
}

// @mixin rem($pxval, $base: $rem-base) {
//     rem($pxval);
// }

// Content Queries
// -----------------------------------------------------------------------------
// http://alistapart.com/article/quantity-queries-for-css

@mixin exactly($n, $target) {
    #{$target}:nth-last-child(#{$n}):first-child,
    #{$target}:nth-last-child(#{$n}):first-child ~ #{$target} {
        @content;
    }
}

@mixin more-than($n, $target) {
    #{$target}:nth-last-child(n + #{$n}),
    #{$target}:nth-last-child(n + #{$n}) ~ #{$target} {
        @content;
    }
}

@mixin fewer-than($n, $target) {
    #{$target}:nth-last-child(-n + #{$n}):first-child,
    #{$target}:nth-last-child(-n + #{$n}):first-child ~ #{$target} {
        @content;
    }
}

// Map deep get
// -----------------------------------------------------------------------------
// From https://css-tricks.com/snippets/sass/deep-getset-maps/

@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        @if map-has-key($map, $key) {
            $map: map-get($map, $key);
        }
        @else {
            $map: null;
            @warn "The key '#{$key}' does not exist in the map you have specified" ;
        }
    }
    @return $map;
}
