//-------------------------------------------------------------------
// Colors
//-------------------------------------------------------------------

// Pallete
//-------------------------------------------------------------------
$palletes: (
    'white': #fff,
    'black': #000,
    'blue': #0094ff,
    'purple': #2714ff,

    'gray': (
        '10': hsl(220, 10, 98),
        '20': hsl(220, 15, 90),
        '30': hsl(220, 20, 85),
        '40': hsl(220, 20, 70),
        '50': hsl(220, 20, 50),
        '60': hsl(220, 20, 40),
        '80': hsl(200, 20, 35),
        '90': hsl(220, 20, 20),
        '100': hsl(220, 20, 10),
    ),

    'brand': (
        'blue': #0094ff,
        'purple': #2714ff,
    ),

    'utility': (
        'error': #d8250e,
        'success': #79cf17,
        'warn': #fda832,
        'attention': #6e14e7,
    ),
);
//
// @function merged($color, $shade, $alpha: 1) {
//     @if map-has-key($brand, $color){
//         $color: map-get($brand, $color);
//         @return rgba($color, $alpha );
//     }
//
//     @if map-has-key($grayscale, $color){
//         $color: map-deep-get($grayscale, $color, $shade);
//         @return rgba($color, $alpha );
//     }
//
//     @return null;
// }
@function color($pallete, $color: '', $alpha: 1) {
    $pallete: map-get($palletes, $pallete);
    $type: type-of($pallete);

    @if map-has-key($palletes, $pallete) {
        @if $type == 'map' {
            $default-color: map-get(nth($pallete, 1));
            $color: map-deep-get($palletes, $pallete, $default-color);
        } @else {
            $color: map-get($palletes, $pallete);
        }

        @return rgba($color, .5);
    }
    // @debug $type;

    // @if length(map-get($palletes, $pallete)) > 0 {
    //     $color: map-deep-get($palletes, $pallete, $color);
    // }
    // @else {
    //     $color: map-get($palletes, $pallete);
    // }
    // @return rgba($color, $alpha );

    // @if map-has-key($pallete, $color) {
    //     $color: map-get($pallete, $color);
    //     @return rgba($color, $alpha );
    // }

    // @warn "The value '#{$color}' is not in the list of grays. See _colors.scss for details";
    @return null;
}

// Font Colours
//-------------------------------------------------------------------

$font-colors: (
    strong: (),
    supporting: (),

    // dark: (
    //     base: gray(xx-dark, 0.8),
    //     strong: gray(xxx-dark),
    //     supporting: gray(dark, 0.8),
    // ),
    // light: (
    //     base: gray(xxx-light, 0.8),
    //     strong: gray(white),
    //     supporting: gray(xxx-light, 0.6),
    // ),
    // highlight: (
    //     base: color(blue),
    //     strong: color(blue-dark),
    //     supporting: color(blue-light),
    // )
);

@mixin font-color($color, $shade: base) {
    @if map-has-key($font-colors, $color) {
        color: map-deep-get($font-colors, $color, $shade);
    }
    @else {
        @warn "The value '#{$color}' is not in the list of font-colors. See _colors.scss for details";
    }
}

// Gradients
//-------------------------------------------------------------------

// Fade gradient from a single color to transparent
@mixin gradient-fade($color, $angle: 0deg, $stop: 100%) {
    background: linear-gradient($angle, rgba($color, 0), $color $stop);
}
