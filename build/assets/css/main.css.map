{"version":3,"sources":["library/_library/_typography.scss","main.scss","library/_library/_colors.scss","library/_library/_mixins.scss","library/_library/_structure.scss"],"names":[],"mappings":"AAIA,sGAAY;AACZ,sFAAY;ACEZ;EACI,kBCA2B;EFkGf,sCAhG8B;EAgG9B,eAnCD;EA+CC,wCA3GkC;EA2GlC,oBGoEkB;EHpElB,iBA9CA;EAyCJ,iBAhEK;ECpCb,gBEmK6B;EFlK7B,cGcwB;EHbxB,0NCmBa,EDVhB;EAjBD;IDqHQ,iBAzEO,EA0EV","file":"main.css","sourcesContent":["//-------------------------------------------------------------------\n// Typography\n//-------------------------------------------------------------------\n\n@import url('https://fonts.googleapis.com/css?family=Montserrat:400,400i,500,500i,600,600i,700,700i');\n@import url('https://fonts.googleapis.com/css?family=Josefin+Sans:400,400i,700,700i');\n\n// Font Families\n//-------------------------------------------------------------------\n\n$font-family-primary: 'Montserrat', sans-serif;\n$font-family-secondary: 'Josefin Sans', sans-serif;\n\n// Typographic Scale\n//-------------------------------------------------------------------\n\n$font-sizes: (\n    'xx-huge': 74px,\n    'x-huge': 56px,\n    'huge': 48px,\n    'xx-large': 32px,\n    'x-large': 24px,\n    'large': 18px,\n    'medium': 16px,\n    'small': 14px,\n    'x-small': 12px,\n    'xx-small': 11px,\n);\n\n@function font-size($size) {\n    @if map-has-key($font-sizes, $size) {\n        $size: map-get($font-sizes, $size);\n\n        @return rem($size);\n    }\n    @else {\n        @warn \"'#{$size}' is not a valid font size. See _typography.scss for a list of acceptable values\";\n        @return null;\n    }\n}\n\n// Font Weights\n//-------------------------------------------------------------------\n\n$font-weights: (\n    'thin': 100,\n    'extra-light': 200,\n    'light': 300,\n    'regular': 400,\n    'medium': 500,\n    'semi-bold': 600,\n    'bold': 700,\n    'extra-bold': 800,\n    'black': 900,\n);\n\n@function font-weight($weight: regular) {\n    @if map-has-key($font-weights, $weight) {\n        @return map-get($font-weights, $weight);\n    }\n\n    @else {\n        @warn \"'#{$weight}' is not a valid font weight. See _typography.scss for a list of acceptable values\";\n        @return null;\n    }\n}\n\n// Line heights\n//-------------------------------------------------------------------\n\n$line-heights: (\n    'single': 1,\n    'small': 1.2,\n    'normal': 1.6,\n    'large': 1.8,\n);\n\n@function line-height($height: 'normal') {\n    @if map-has-key($line-heights, $height) {\n        $height: map-get($line-heights, $height);\n        @return $height;\n    }\n\n    @else {\n        @warn \"'#{$height}' is not a valid line-height. See _typography.scss for a list of acceptable values\";\n        @return null;\n    }\n}\n// Font Styles\n//-------------------------------------------------------------------\n@mixin strong() {\n    @extend %strong !optional;\n}\n// Find the style from the library and print out its properties\n@mixin font($library, $style: 'default', $weight: 'regular') {\n\n    $default-style: map-get($library, default);\n    $style: map-get($library, $style);\n\n    @each $key, $value in $default-style {\n        @if $key == $weight {\n            font-weight: $value;\n        }\n\n        @if $key != 'regular' {\n            @if $key != 'strong' {\n                #{$key}: $value;\n            }\n        }\n    }\n\n    @each $key, $value in $style {\n        @if $key == $weight {\n            font-weight: $value;\n        }\n\n        @if $key != 'regular' {\n            @if $key != 'strong' {\n                #{$key}: $value;\n            }\n        }\n    }\n\n    %strong {\n        font-weight: map-get($style, 'strong');\n    }\n}\n\n\n\n// Title Styles\n//-------------------------------------------------------------------\n\n$title: (\n    'default': (\n        font-family: $font-family-primary,\n        line-height: line-height('single'),\n    ),\n    'hero': (\n        font-size: font-size('xx-huge'),\n        'regular': font-weight('thin'),\n        'strong': font-weight('medium'),\n    ),\n    'large': (\n        font-family: $font-family-secondary,\n        font-size: font-size('large'),\n        line-height: line-height('small'),\n        'regular': font-weight('medium'),\n        'strong': font-weight('bold'),\n    ),\n    'medium': (\n        font-family: $font-family-secondary,\n        font-size: font-size('large'),\n        font-weight: font-size('large'),\n        line-height: line-height('small'),\n    ),\n    'small': (\n        font-size: font-size('small'),\n        text-transform: uppercase,\n        letter-spacing: .24em,\n        'regular': font-weight('semi-bold'),\n        'strong': font-weight('black'),\n    ),\n);\n\n// Body Styles\n//-------------------------------------------------------------------\n\n$body: (\n    'default': (\n        font-family: $font-family-primary,\n    ),\n    'large': (\n    ),\n    'medium': (\n    ),\n    'small': (\n        font-size: font-size('small'),\n        'regular': font-weight('medium'),\n    ),\n    'x-small': (\n        font-size: font-size('x-small'),\n        'regular': font-weight('medium'),\n    ),\n);\n\n// Interface Styles\n//-------------------------------------------------------------------\n\n$interface: (\n    'default': (\n        font-family: $font-family-primary,\n        color: red,\n    ),\n    'x-small': (\n        font-size: font-size('x-small'),\n        'regular': font-weight('medium'),\n        'strong': font-weight('bold'),\n    ),\n    'small': (\n        font-size: font-size('x-small'),\n        'regular': font-weight('medium'),\n        'strong': font-weight('bold'),\n    ),\n    'medium': (\n        font-size: font-size('small'),\n        'regular': font-weight('medium'),\n        'strong': font-weight('bold'),\n    ),\n    'large': (\n        font-size: font-size('large'),\n        'regular': font-weight('regular'),\n        'strong': font-weight('bold'),\n    ),\n);\n","// @import \"library/reset\";\n@import \"library/library\";\n\nbody {\n  background-color: $body-bg;\n}\n\nh1 {\n    background: gray('white');\n    // color: font-color('dark', 'strong');\n    // font-size: font-size('xx-large');\n    // font-family: $font-family-primary;\n    @include font($title, 'large');\n    max-width: $s-large;\n    padding: d(6);\n    box-shadow: shadow(1), glow(10);\n    outline: line(color('blue-dark'));\n\n    @include mq($s-large)\n\n    span {\n        @include strong;\n        // margin-bottom: map-deep-get($title, 'small', 'font-size');\n    }\n}\n//     @include font($title, 'hero');\n//\n//     span {\n//         @include strong;\n//     }\n// }\n","//-------------------------------------------------------------------\n// Colors\n//-------------------------------------------------------------------\n\n// Grayscale\n//-------------------------------------------------------------------\n\n$grayscale: (\n    'white': hsl(255, 255, 255),\n    10:    hsl(220, 10, 98),\n    20:    hsl(220, 15, 90),\n    30:    hsl(220, 20, 85),\n    40:    hsl(220, 20, 70),\n    50:    hsl(220, 20, 50),\n    60:    hsl(220, 20, 40),\n    80:    hsl(200, 20, 35),\n    90:    hsl(220, 20, 20),\n    100:   hsl(220, 20, 10),\n    'black': hsl(0, 0, 0),\n);\n\n@function gray($gray, $alpha: 1) {\n    @if map-has-key($grayscale, $gray) {\n        $fill: rgba(map-get($grayscale, $gray), $alpha);\n        @return $fill;\n    }\n    @warn \"The value '#{$gray}' is not in the list of grays. See _colors.scss for details\";\n    @return null;\n}\n\n// Brand Colors\n//-------------------------------------------------------------------\n\n$colors: (\n    blue: #0094ff,\n    blue-light: #0094ff,\n    blue-dark: #007aff,\n    purple: #2714ff,\n);\n\n@function color($color, $alpha: 1) {\n    @if map-has-key($colors, $color) {\n        $fill: rgba(map-get($colors, $color), $alpha);\n        @return $fill;\n    }\n    @warn \"The value '#{$color}' is not in the list of colors. See _colors.scss for details\";\n    @return null;\n}\n\n// Utility Colours\n//-------------------------------------------------------------------\n\n$color-ui-error: #d8250e;\n$color-ui-success: #79cf17;\n$color-ui-warn: #fda832;\n$color-ui-attention: #6e14e7;\n\n// Font Colours\n//-------------------------------------------------------------------\n\n$font-colors: (\n    dark: (\n        base: gray(xx-dark, 0.8),\n        strong: gray(xxx-dark),\n        supporting: gray(dark, 0.8),\n    ),\n    light: (\n        base: gray(xxx-light, 0.8),\n        strong: gray(white),\n        supporting: gray(xxx-light, 0.6),\n    ),\n    highlight: (\n        base: color(blue),\n        strong: color(blue-dark),\n        supporting: color(blue-light),\n    )\n);\n\n@mixin font-color($color, $shade: base) {\n    @if map-has-key($font-colors, $color) {\n        color: map-deep-get($font-colors, $color, $shade);\n    }\n    @else {\n        @warn \"The value '#{$color}' is not in the list of font-colors. See _colors.scss for details\";\n    }\n}\n\n// Gradients\n//-------------------------------------------------------------------\n\n// Fade gradient from a single color to transparent\n@mixin gradient-fade($color, $angle: 0deg, $stop: 100%) {\n    background: linear-gradient($angle, rgba($color, 0), $color $stop);\n}\n","// Layout\n// -----------------------------------------------------------------------------\n\n// Maintain a porportionate width/height ratio\n@mixin ratio($width, $height) {\n    position: relative;\n\n    &::before {\n        content: '';\n        display: block;\n        padding-top: #{($height / $width) * 100%};\n        @content;\n    }\n}\n\n// Share padding and margin values\n@mixin padding-x($value) {\n    padding-left: $value;\n    padding-right: $value;\n}\n\n@mixin padding-y($value) {\n    padding-top: $value;\n    padding-bottom: $value;\n}\n\n@mixin margin-x($value) {\n    margin-left: $value;\n    margin-right: $value;\n}\n\n@mixin margin-y($value) {\n    margin-top: $value;\n    margin-bottom: $value;\n}\n\n@mixin iphone-x-safe-area($edges...) {\n    @if length($edges) > 0 {\n        @each $edge in $edges {\n            padding-#{$edge}: env(safe-area-inset-#{$edge});\n        }\n    } @else {\n        padding: env(safe-area-inset-top)\n        env(safe-area-inset-right)\n        env(safe-area-inset-bottom)\n        env(safe-area-inset-left);\n    }\n}\n\n// If only one value is passed, the height will equal the width\n@mixin size($height, $width: $height) {\n    height: $height;\n    width: $width;\n}\n\n// Circle\n// Create a square with a full border radius\n@mixin circle($size) {\n    @include size($size);\n    border-radius: $size;\n}\n\n// Quick Absolute Positioning\n@mixin absolute {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n}\n\n@mixin center-child($method: 'flex') {\n    @if $method == 'flex' {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n\n        * > {\n            margin: auto;\n        }\n    }\n\n    @if $method == 'absolute' {\n        position: relative;\n\n        > * {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate3d(-50%, -50%, 0);\n        }\n    }\n}\n\n// Clear Fix\n@mixin clearfix {\n    &::after {\n        clear: both;\n        content: '';\n        display: table;\n    }\n}\n\n// Hide visually, still be present for screen readers\n@mixin visually-hidden {\n    position: absolute;\n    left: -10000px;\n    top: auto;\n    width: 1px;\n    height: 1px;\n    overflow: hidden;\n}\n\n// Media Queries\n// -----------------------------------------------------------------------------\n\n@mixin mq($size, $limiter: 'min-width', $max-size: '') {\n    @if ($limiter == 'between') {\n        @media only screen and (min-width: $size) and (max-width: $max-size) {\n            @content;\n        }\n    } @else {\n        @media only screen and ($limiter: $size) {\n            @content;\n        }\n    }\n}\n\n// Presentation Styles\n// -----------------------------------------------------------------------------\n\n// Displaying and Hiding Content\n@mixin show($state) {\n    will-change: auto;\n    @if $state == on {\n        pointer-events: auto;\n        visibility: visible;\n        opacity: 1;\n    }\n\n    @if $state == off {\n        pointer-events: none;\n        visibility: hidden;\n        opacity: 0;\n    }\n}\n\n@mixin truncate() {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n// Strip Units\n// -----------------------------------------------------------------------------\n// Strips the unit from a number.\n//    https://github.com/thoughtbot/bourbon/blob/v4-stable/app/assets/stylesheets/functions/_strip-units.scss\n//    https://css-tricks.com/snippets/sass/strip-unit-function/\n\n@function strip-units($number) {\n    @if type-of($number) == 'number' and not unitless($number) {\n        @return $number / ($number * 0 + 1);\n    }\n\n    @return $number;\n}\n\n// Convert Pixels to EMs\n// -----------------------------------------------------------------------------\n// eg. for a relational value of 12px write em(12) when the parent is 16px\n// if the parent is another value say 24px write em(12, 24)\n//    https://github.com/thoughtbot/bourbon/blob/v4-stable/app/assets/stylesheets/functions/_px-to-em.scss\n\n@function em($pxval, $base: 16) {\n    $pxval: strip-units($pxval);\n\n    @return ($pxval / $base) + em;\n}\n\n// @mixin em($pxval, $base: $em-base) {\n//     em($pxval);\n// }\n\n@function rem($pxval, $base: 16) {\n    $pxval: strip-units($pxval);\n\n    @return ($pxval / $base) + rem;\n}\n\n// @mixin rem($pxval, $base: $rem-base) {\n//     rem($pxval);\n// }\n\n// Content Queries\n// -----------------------------------------------------------------------------\n// http://alistapart.com/article/quantity-queries-for-css\n\n@mixin exactly($n, $target) {\n    #{$target}:nth-last-child(#{$n}):first-child,\n    #{$target}:nth-last-child(#{$n}):first-child ~ #{$target} {\n        @content;\n    }\n}\n\n@mixin more-than($n, $target) {\n    #{$target}:nth-last-child(n + #{$n}),\n    #{$target}:nth-last-child(n + #{$n}) ~ #{$target} {\n        @content;\n    }\n}\n\n@mixin fewer-than($n, $target) {\n    #{$target}:nth-last-child(-n + #{$n}):first-child,\n    #{$target}:nth-last-child(-n + #{$n}):first-child ~ #{$target} {\n        @content;\n    }\n}\n\n// Map deep get\n// -----------------------------------------------------------------------------\n// From https://css-tricks.com/snippets/sass/deep-getset-maps/\n\n@function map-deep-get($map, $keys...) {\n    @each $key in $keys {\n        @if map-has-key($map, $key) {\n            $map: map-get($map, $key);\n        }\n        @else {\n            $map: null;\n            @warn \"The key '#{$key}' does not exist in the map you have specified\" ;\n        }\n    }\n    @return $map;\n}\n","//-------------------------------------------------------------------\n// Structure\n//-------------------------------------------------------------------\n\n// Screen Sizes for Media Queries\n//-------------------------------------------------------------------\n// S stands for Screen\n$s-xxx-large:     em(1900px);\n$s-xx-large:      em(1640px);\n$s-x-large:       em(1366px);\n$s-large:         em(1280px);\n\n$s-medium-large:  em(975px);\n$s-medium:        em(768px);\n$s-medium-small:  em(640px);\n\n$s-small:         em(520px);\n$s-x-small:       em(375px);\n$s-xx-small:      em(360px);\n$s-xxx-small:     em(320px);\n\n// Dimensions\n//-------------------------------------------------------------------\n// D stands for Dimension\n\n$d-base: 8px;\n\n@function d($scale) {\n    @return $d-base * $scale;\n}\n\n// Z-Index Scheme\n//-------------------------------------------------------------------\n// z stands for z-index\n\n$z-under: -1;\n$z-zero: 0;\n$z-flat: 1;\n$z-high: 10;\n$z-x-high: 100;\n$z-xx-high: 1000;\n$z-xxx-high: 10000;\n$z-xxxx-high: 100000;\n\n// Shadows\n//-------------------------------------------------------------------\n\n@function shadow($style, $shadow-color: gray(100), $opacity: 0.1) {\n\n    $shadows: (\n        border: (\n            0 0 0 1px $shadow-color\n        ),\n        1: (\n            0 0px 1px 0 rgba($shadow-color, $opacity),\n            0 1px 2px 0 rgba($shadow-color, $opacity),\n            0 1px 4px 0 rgba($shadow-color, $opacity),\n            0 1px 6px 0 rgba($shadow-color, $opacity)\n        ),\n        2: (\n            0 0px 2px 0 rgba($shadow-color, $opacity),\n            0 2px 6px -1px rgba($shadow-color, $opacity),\n            0 4px 12px -2px rgba($shadow-color, $opacity),\n            0 8px 18px -4px rgba($shadow-color, $opacity)\n        ),\n        3: (\n            0 0px 5px 0 rgba($shadow-color, $opacity),\n            0 10px 10px 0 rgba($shadow-color, $opacity),\n            0 10px 20px -10px rgba($shadow-color, $opacity),\n            0 20px 30px -20px rgba($shadow-color, $opacity)\n        ),\n        4: (\n            0 0px 10px 0 rgba($shadow-color, $opacity),\n            0 10px 20px -10px rgba($shadow-color, $opacity),\n            0 30px 20px -10px rgba($shadow-color, $opacity),\n            0 40px 40px -10px rgba($shadow-color, $opacity)\n        ),\n        5: (\n            0 0px 20px 0 rgba($shadow-color, $opacity),\n            0 40px 20px -20px rgba($shadow-color, $opacity),\n            0 60px 40px -20px rgba($shadow-color, $opacity * 2),\n            0 80px 80px -40px rgba($shadow-color, $opacity * 2)\n        ),\n        6: (\n            0 0px 40px 0 rgba($shadow-color, $opacity),\n            0 40px 40px -10px rgba($shadow-color, $opacity * 2),\n            0 60px 60px -20px rgba($shadow-color, $opacity * 3),\n            0 80px 120px -40px rgba($shadow-color, $opacity * 4)\n        )\n    );\n    $style: map-get($shadows, $style);\n    @return $style;\n}\n\n// Glow\n//-------------------------------------------------------------------\n\n\n@function glow($size: 1, $glow-color: color(blue), $steps: 2, $alpha: .5) {\n    $glows: null;\n\n    @for $i from 1 through $steps {\n        $glow-layer: 0 0 d(($i * $size) / $steps) rgba($glow-color, $alpha / $i);\n\n        $glows: append($glows, $glow-layer, comma);\n    }\n\n    @return $glows;\n}\n\n// Lines\n//-------------------------------------------------------------------\n\n$lines: (\n    light:  1px solid gray(light, 0.4),\n    dark:   1px solid gray(x-dark, 0.5),\n    normal: 1px solid gray(medium, 0.3)\n);\n\n@function line($style: normal) {\n    $style: map-get($lines, $style);\n    @return $style;\n}\n\n// Border Radius\n//-------------------------------------------------------------------\n// BR stands for border radius\n\n$radii: (\n    x-large:  16px,\n    large:    10px,\n    medium:   8px,\n    small:    6px,\n    x-small:  4px,\n    xx-small: 2px,\n);\n\n@function radius($size) {\n    @if map-has-key($radii, $size) {\n        $size: map-get($radii, $size);\n        @return $size;\n    }\n    @warn \"'#{$size}' is not a valid border radius value. See _structure.scss for a list of acceptable values\";\n    @return null;\n}\n"]}